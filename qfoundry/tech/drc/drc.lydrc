<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>drc</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>drc_scripts</group-name>
 <menu-path>tools_menu.drc.end</menu-path>
 <interpreter>dsl</interpreter>
 <dsl-interpreter-name>drc-dsl-xml</dsl-interpreter-name>
 <text>report("qfoundry-PDK DRC")
excpt = input(111)
 
al_tol = 0.0.um
jj_tol = 0.005.um

poly_al_sc = input("1","130/1").flatten.merged- excpt
poly_al_jj = input("2/0").flatten - excpt

devRec    = input(68,0).flatten
floorPlan = input(99).flatten
writeField = input(98).flatten
airbridge_pads    = input(146,1).flatten - excpt
airbridge_flyover = input(147,1).flatten - excpt
qw_airbridge_pad  = input(6,10).flatten

poly_sc_pos = floorPlan.merged - (poly_al_sc)

# Check device overlaps (functional check)
dev_overlaps = devRec.merged(2)
output(dev_overlaps, "Devices Overlap","Devices cannot be overlapping.")

# Positioning of Jucntions on leads
junction_bb = poly_al_jj.extents().sized(-1.5.um)
junction_extension = (poly_al_jj-junction_bb).sized(-0.3.um).sized(0.3.um)
junction_extension_error = junction_extension.separation(poly_al_sc, 2.5.um - al_tol)
junction_extension_error.output("Junction Extension Spacing Violation", "Junction extension must be at least 2.5 um from base aluminum.")

# Junctions overlapping
jj_overlap = poly_al_jj.merged(2)
jj_overlap.output("Junctions Overlap","It appears that multiple junctions are overlapping.")


# Check junction overlap
intersection = poly_al_jj.and(poly_al_sc)
islands = intersection.merged
fragmented_devices = poly_al_jj.covering(islands, 2)
fragmented_devices.output("Junction Fragmented", "Junctions are extending multiple base aluminum sections.")

#Positioning of junctions to writefield
overlap = poly_al_jj.overlapping(writeField.raw,2)
overlap.output("Junction misaligned","The junction overlaps more than one EBL writefield. Junctions need to be fully enclosed by a single writefield.")
outside = poly_al_jj.outside(writeField)
outside.output("Junctions outside WF","Junctions must be defined within a writefield boundary.")

# Make sure the devices are within the floor plan layer region;
poly_al_sc.outside(floorPlan).output("Aluminum Boundary","Devices are out of the design boundary")
poly_al_jj_outside = poly_al_jj.outside(floorPlan)
poly_al_jj_outside.output("Junction Boundary","Junctions are out of the design boundary")

wf_overlap = writeField.merged(2)
wf_overlap.output("WF Instance ill defined","It appears that more than one type of writefield is being defined or WF cells are overlapping.")

# Dimensions of aluminum superconductive layer
poly_sc_pos.width(3.micron-al_tol,angle_limit(0.01)).output("wg width","Waveguide width minimum feature size violation; min 3 um")
spacing_errors = poly_sc_pos.clean.space(2.micron-al_tol,angle_limit(60))
output(spacing_errors, "wg space","Waveguide width minimum feature size violation; min 2000 nm")

poly_al_jj.width(0.2.micron-jj_tol).output("jj width","Waveguide width minimum feature size violation; min 250 nm")
poly_al_jj.space(0.2.micron-jj_tol,angle_limit(60)).output("jj space","Waveguide width minimum feature size violation; min 250 nm")


#airbridge_pads.and(poly_al_sc).output("Airbridges","Metalization in the airbridge pads is overlapping with the waveguide spacing.")
airbridge_pads.select_not_inside(airbridge_flyover).output("Airbridges","The pads of the airbridges needs to be fully covered by the flyover region.")

qw_airbridge_pad.and(poly_al_sc).output("Airbridges","Metalization in the airbridge pads is overlapping with the waveguide spacing.")

</text>
</klayout-macro>
