<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya
import csv

def export_locations_to_csv(locations, parent_window):
    """
    Exports a list of junction locations and their parent cells to a CSV file.
    It opens a file dialog for the user to choose the save location.

    Args:
        locations (list): A list of tuples, where each tuple is
                          (x_coord, y_coord, parent_name).
        parent_window (QMainWindow): The main KLayout window to parent the dialog.
    """
    if not locations:
        print("No locations to export.")
        return

    # Open a file dialog to get the save path from the user
    file_path = pya.QFileDialog.getSaveFileName(
        parent_window,
        "Save Junction Locations as CSV",
        "",  # Start directory
        "CSV Files (*.csv)"
    )

    # The dialog returns a tuple (path, filter), we only need the path.
    # In some versions of Qt/PySide, it might just be a string.
    if isinstance(file_path, tuple):
        file_path = file_path[0]

    if file_path:
        try:
            with open(file_path, 'w', newline='') as csvfile:
                writer = csv.writer(csvfile)

                # Write the header
                writer.writerow(["X Coordinate (um)", "Y Coordinate (um)", "Parent Cell"])

                # Write the data rows
                for x, y, parent_name in locations:
                    writer.writerow([f"{x:.6f}", f"{y:.6f}", parent_name])

            print(f"Successfully exported {len(locations)} locations to: {file_path}")

        except Exception as e:
            print(f"Error exporting to CSV: {e}")
    else:
        print("CSV export cancelled by user.")


def find_junction_placeholders_with_parent(target_cell_name = "junction_placeholder"):
    """
    Finds all instances of the cell "junction_placeholder" in the current layout,
    including those in arrays and nested cells, and returns their global
    coordinates and the name of their parent cell.
    """
    app = pya.Application.instance()
    mw = app.main_window()
    lv = mw.current_view()
    if lv is None:
        raise Exception("No layout view found. Please open a layout.")

    layout = lv.active_cellview().layout()
    top_cell = lv.active_cellview().cell
    if top_cell is None:
        raise Exception("No top cell found in the current view.")

    
    locations = []

    # Recursive function to search for the target cell
    def search_cell(parent_cell, trans, depth):
        if depth &gt; 2:
            return

        for inst in parent_cell.each_inst():
            child_cell = inst.cell
            if inst.is_regular_array():
                for i in range(inst.na):
                    for j in range(inst.nb):
                        array_trans = pya.Trans(inst.a * i + inst.b * j)
                        instance_trans = trans * inst.trans * array_trans
                        if child_cell.name == target_cell_name:
                            global_pos = instance_trans.disp
                            locations.append((global_pos.x * layout.dbu, global_pos.y * layout.dbu, parent_cell.name))
                        else:
                            search_cell(child_cell, instance_trans, depth + 1)
            else:
                instance_trans = trans * inst.trans
                if child_cell.name == target_cell_name:
                    global_pos = instance_trans.disp
                    locations.append((global_pos.x * layout.dbu, global_pos.y * layout.dbu, parent_cell.name))
                else:
                    search_cell(child_cell, instance_trans, depth + 1)

    # Start the search
    search_cell(top_cell, pya.Trans.new(), 0)

    # Print the results table
    if locations:
        print("----------------------------------------------------------------------")
        print(f"Found {len(locations)} instances of '{target_cell_name}':")
        print("----------------------------------------------------------------------")
        print("{:&lt;20} {:&lt;20} {:&lt;30}".format("X Coordinate (µm)", "Y Coordinate (µm)", "Parent Cell"))
        print("----------------------------------------------------------------------")
        for x, y, parent_name in locations:
            print("{:&lt;20.6f} {:&lt;20.6f} {:&lt;30}".format(x, y, parent_name))
        print("----------------------------------------------------------------------")
    else:
        print(f"No instances of cell '{target_cell_name}' found.")

    return locations, mw # Return both the list and the main window handle

# --- Main execution ---
if __name__ == "__main__":
    # Find the junctions and get the locations list
    cell_name = "junction_placeholder"
    found_locations, main_window = find_junction_placeholders_with_parent(cell_name)

    # If any locations were found, ask the user if they want to export to CSV
    if found_locations:
        # This creates a simple "Yes/No" message box
        reply = pya.QMessageBox.question(
            main_window,
            "Export to CSV",
            f'A total of {len(found_locations)} {cell_name} locations were found. Do you want to export the list to a CSV file?',
            pya.QMessageBox.Yes | pya.QMessageBox.No,
            pya.QMessageBox.No # Default button
        )

        if reply == pya.QMessageBox.Yes:
            # Call the export function with the locations list
            export_locations_to_csv(found_locations, main_window)</text>
</klayout-macro>
