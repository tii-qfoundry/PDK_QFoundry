<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>
# From: KQCircuits, Copyright (C) 2023 IQM Finland Oy
# Last Edit: JVillegas, TII, 01/09/23

"""Macro for adding new user directory for user defined elements.

Note, this only makes sense when using KQCircuits Salt package!

This will do the following things:
    * create the directory (if not already there)
    * add symlink to it so that KLayout recognises it
    * create subdirectories for libraries (if not already there)
"""

import os
import pya
import math
import subprocess
from pathlib import Path
from kqcircuits.util.library_helper import get_library_paths


def _setup_pkg(src_dir, pkg_name):
    """set up selected user directory as a new KQC package."""

    salt = Path(os.path.dirname(os.path.realpath(__file__))).parents[4]
    
    
    user = os.environ['USERPROFILE'];
    salt = Path(os.path.join(user,'KLayout','salt'))
    
    if salt.parts[-1] != "salt":
        raise RuntimeError("Supported only when using KQC Salt package.")

    target_path = Path(src_dir)
    link_path = os.path.join(salt.parents[0], "python", pkg_name)
    print_message = ~os.path.isdir(link_path) 
    target_path.mkdir(exist_ok=True)
    for lib in get_library_paths():
        Path(os.path.join(target_path, lib)).mkdir(exist_ok=True)

    if os.path.lexists(link_path):
        os.unlink(link_path)
    if os.name == "nt":  # use junction link in Windows
        subprocess.check_call(['cmd', '/c', 'mklink', '/J', link_path, target_path])
    else:
        os.symlink(target_path, link_path, target_is_directory=True)
        
    if (os.name == "nt") &amp; print_message:
        pya.MessageBox.info(f"Added '{pkg_name}' package.",
                            "Restart KLayout to make it visible!", pya.MessageBox.Ok)

src_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)),'starfish')
pkg_name = Path(src_dir).parts[-1]

try:
    _setup_pkg(src_dir, pkg_name)
except Exception as ex:
    pya.QMessageBox.critical("Error", str(ex))

</text>
</klayout-macro>
